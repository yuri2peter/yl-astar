{"version":3,"sources":["../../src/test/game.js"],"names":["Game","map","grid","nodes","startNodeId","endNodeId","getNeighbors","nodeId","node","endNode","x","y","char","t","filter","dis","Math","abs","singleCost","predictCost","id","parseMap","astar","Astar","rows","split","trim","forEach","line","row","push","next","then","rel","paint","getPath","setTimeout","path","includes","console","log","join"],"mappings":"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","sourcesContent":["import Astar from '../index';\n\nclass Game {\n  grid = [];\n  nodes = {};\n  startNodeId = '';\n  endNodeId = '';\n\n  constructor(map) {\n    this.parseMap(map);\n    this.astar = new Astar(this.startNodeId, this.endNodeId, this.getNeighbors);\n  }\n\n  getNeighbors = (nodeId) => {\n    const node = this.nodes[nodeId];\n    const endNode = this.nodes[this.endNodeId];\n    const { x, y, char } = node;\n    return [\n      `${x - 1},${y - 1}`,\n      `${x},${y - 1}`,\n      `${x + 1},${y - 1}`,\n      `${x - 1},${y}`,\n      `${x + 1},${y}`,\n      `${x - 1},${y + 1}`,\n      `${x},${y + 1}`,\n      `${x + 1},${y + 1}`,\n    ].map(t => this.nodes[t]).filter(t => t).map(t => {\n      const dis = Math.abs(x - t.x) + Math.abs(y - t.y);\n      let singleCost = dis > 1 ? 14 : 10;\n      if (char === '+') { singleCost = 9999; }\n      const predictCost = (Math.abs(endNode.x - t.x) + Math.abs(endNode.y - t.y)) * 10;\n      return {\n        id: t.id,\n        singleCost,\n        predictCost,\n      };\n    });\n  };\n\n  parseMap(map) {\n    const rows = map.split('\\n').map(t => t.trim()).filter(t => t);\n    rows.forEach((line, y) => {\n      const row = [];\n      line.split('').forEach((t, x) => {\n        const id = `${x},${y}`;\n        const node = {\n          id,\n          x,\n          y,\n          char: t,\n        };\n        this.nodes[id] = node;\n        row.push(node);\n        if (t === 'A') { this.startNodeId = id; }\n        if (t === 'B') { this.endNodeId = id; }\n      });\n      this.grid.push(row);\n    });\n  }\n\n  start() {\n    this.next().then();\n  }\n\n  async next() {\n    const rel = await this.astar.next();\n    this.paint(this.astar.getPath());\n    if (rel === 0) {\n      setTimeout(() => {\n        this.next().then();\n      }, 100);\n    }\n  }\n\n  paint(path = []) {\n    const map = [];\n    this.grid.forEach(row => {\n      row.forEach(t => {\n        if (path.includes(t.id)) {\n          map.push('*');\n        } else {\n          map.push(t.char);\n        }\n      });\n      map.push('\\n');\n    });\n    console.log(map.join(''));\n  }\n}\n\nexport default Game;\n"],"file":"game.js"}